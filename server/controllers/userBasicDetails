const db = require("../config/database.js");

async function userBasicDetails(req, res) {
  try {
    // Query to get total users and total users created today
    const usersQuery = `
        SELECT 
            COUNT(*) AS total_users,
            COUNT(CASE WHEN DATE(created_at) = CURDATE() THEN 1 END) AS total_users_today
        FROM users;
    `;
    const [usersRows] = await db.query(usersQuery);

    // Query to get total likes, comments, shares, and posts
    const postsQuery = `
        SELECT 
            SUM(likes_count) AS total_likes,
            SUM(comment_count) AS total_comments,
            SUM(share_count) AS total_shares,
            COUNT(id) AS total_posts,
            COUNT(CASE WHEN DATE(created_at) = CURDATE() THEN 1 END) AS total_posts_today
        FROM all_posts;
    `;
    const [postsRows] = await db.query(postsQuery);

    // Query to count the number of complete and incomplete users
    const profileStatusQuery = `
        SELECT
            profile_status,
            COUNT(*) AS user_count
        FROM (
            SELECT
                u.id,
                CASE 
                    WHEN MAX(p.profile_pic IS NOT NULL) 
                        AND MAX(p.profile_video IS NOT NULL) 
                        AND MAX(pi.interest_id IS NOT NULL) 
                        AND MAX(ps.skill_id IS NOT NULL) 
                    THEN 'Complete'
                    ELSE 'Incomplete'
                END AS profile_status
            FROM
                users u
            LEFT JOIN
                profiles p ON u.id = p.user_id
            LEFT JOIN
                profile_interests pi ON u.id = pi.user_id
            LEFT JOIN
                profile_skills ps ON u.id = ps.user_id
            GROUP BY
                u.id
        ) AS profile_statuses
        GROUP BY
            profile_status;
    `;
    const [profileStatusRows] = await db.query(profileStatusQuery);

    // Initialize counts for complete and incomplete users
    let completeUsers = 0;
    let incompleteUsers = 0;

    // Iterate over the profile status results and assign the counts
    profileStatusRows.forEach(row => {
        if (row.profile_status === 'Complete') {
            completeUsers = row.user_count;
        } else if (row.profile_status === 'Incomplete') {
            incompleteUsers = row.user_count;
        }
    });

    // Combine results from all queries into one response
    res.status(200).json({
        total_users: usersRows[0].total_users,
        total_users_today: usersRows[0].total_users_today,
        total_likes: postsRows[0].total_likes,
        total_comments: postsRows[0].total_comments,
        total_shares: postsRows[0].total_shares,
        total_posts: postsRows[0].total_posts,
        total_posts_today: postsRows[0].total_posts_today,
        complete_users: completeUsers,
        incomplete_users: incompleteUsers
    });
} catch (error) {
    console.error("Error fetching user details:", error);
    res
      .status(500)
      .json({ message: "An error occurred while fetching user details" });
  }
}

module.exports = { userBasicDetails };
